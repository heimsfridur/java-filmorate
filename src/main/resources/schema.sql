DROP TABLE IF EXISTS mpa cascade;
DROP TABLE IF EXISTS films cascade;
DROP TABLE IF EXISTS genres cascade;
DROP TABLE IF EXISTS films_genres cascade;
DROP TABLE IF EXISTS users cascade;
DROP TABLE IF EXISTS films_likes cascade;
DROP TABLE IF EXISTS friends cascade;

CREATE TABLE IF NOT EXISTS MPA (
	mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	mpa_name VARCHAR(200) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name VARCHAR(200) NOT NULL,
    film_description VARCHAR(200),
    film_releaseDate DATE NOT NULL,
    film_duration INTEGER NOT NULL,
    film_mpa INTEGER REFERENCES MPA(mpa_id)
);

CREATE TABLE IF NOT EXISTS genres (
  genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  genre_name VARCHAR(200) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS  films_genres (
  film_id INTEGER REFERENCES films(film_id),
  genre_id INTEGER REFERENCES genres(genre_id),
  PRIMARY KEY(film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users (
  user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_email VARCHAR(200) NOT NULL,
  user_login VARCHAR(200) NOT NULL,
  user_name VARCHAR(200),
  user_birthday DATE NOT NULL
);

create unique index if not exists USER_EMAIL_UINDEX on USERS (user_email);
create unique index if not exists USER_LOGIN_UINDEX on USERS (user_login);

CREATE TABLE IF NOT EXISTS  films_likes (
  film_id INTEGER REFERENCES films(film_id),
  user_id INTEGER REFERENCES users(user_id),
  PRIMARY KEY(film_id, user_id)
);

CREATE TABLE IF NOT EXISTS friends (
  user_id INTEGER,
  friend_id INTEGER,
  friends_status BOOLEAN,
  PRIMARY KEY(user_id, friend_id)
);