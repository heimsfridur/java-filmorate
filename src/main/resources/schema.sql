DROP TABLE IF EXISTS mpa cascade;
DROP TABLE IF EXISTS films cascade;
DROP TABLE IF EXISTS genres cascade;
DROP TABLE IF EXISTS films_genres cascade;
DROP TABLE IF EXISTS users cascade;
DROP TABLE IF EXISTS films_likes cascade;
DROP TABLE IF EXISTS friends cascade;
DROP TABLE IF EXISTS reviews cascade;
DROP TABLE IF EXISTS review_rating cascade;
DROP TABLE IF EXISTS directors cascade;
DROP TABLE IF EXISTS films_directors cascade;
DROP TABLE IF EXISTS feed cascade;



CREATE TABLE IF NOT EXISTS MPA (
	mpa_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	mpa_name VARCHAR(200) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name VARCHAR(200) NOT NULL,
    film_description VARCHAR(200),
    film_releaseDate DATE NOT NULL,
    film_duration INTEGER NOT NULL,
    film_mpa INTEGER REFERENCES MPA(mpa_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS genres (
  genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  genre_name VARCHAR(200) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS  films_genres (
  film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE ON UPDATE CASCADE,
  genre_id INTEGER REFERENCES genres(genre_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY(film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users (
  user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_email VARCHAR(200) NOT NULL,
  user_login VARCHAR(200) NOT NULL,
  user_name VARCHAR(200),
  user_birthday DATE NOT NULL
);

create unique index if not exists USER_EMAIL_UINDEX on USERS (user_email);
create unique index if not exists USER_LOGIN_UINDEX on USERS (user_login);

CREATE TABLE IF NOT EXISTS  films_likes (
  film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE ON UPDATE CASCADE,
  user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY(film_id, user_id)
);

CREATE TABLE IF NOT EXISTS friends (
  user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  friend_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
  friends_status BOOLEAN,
  PRIMARY KEY(user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS reviews (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR(500) NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE ON UPDATE CASCADE,
    useful INTEGER DEFAULT 0
);

CREATE TABLE IF NOT EXISTS review_rating (
    review_id INTEGER REFERENCES reviews(review_id) ON DELETE CASCADE ON UPDATE CASCADE,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    is_helpful BOOLEAN,
    PRIMARY KEY(review_id, user_id)
);

CREATE TABLE IF NOT EXISTS directors (
    director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name VARCHAR(200) NOT NULL
);

CREATE TABLE IF NOT EXISTS films_directors (
    film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE ON UPDATE CASCADE,
    director_id INTEGER REFERENCES directors(director_id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY(film_id, director_id)
);

CREATE TABLE IF NOT EXISTS feed (
    event_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timestamp TIMESTAMP NOT NULL,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    event_type VARCHAR(50) CHECK(event_type IN ('LIKE', 'REVIEW', 'FRIEND')),
    operation VARCHAR(50) CHECK(operation IN ('REMOVE', 'ADD', 'UPDATE')),
    entity_id INTEGER NOT NULL
);